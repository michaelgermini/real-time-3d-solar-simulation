cmake_minimum_required(VERSION 3.16)
project(RealTime3DSimulation VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find OpenGL
find_package(OpenGL REQUIRED)

# Try to find GLFW3
find_package(PkgConfig QUIET)
if(PkgConfig_FOUND)
    pkg_check_modules(GLFW3 QUIET glfw3)
endif()

if(NOT GLFW3_FOUND)
    # Try to find GLFW3 manually
    find_path(GLFW3_INCLUDE_DIR NAMES GLFW/glfw3.h
        PATHS
        ${CMAKE_SOURCE_DIR}/external/glfw/include
        ${CMAKE_SOURCE_DIR}/include
        /usr/include
        /usr/local/include
        "C:/Program Files/GLFW/include"
        "C:/msys64/mingw64/include"
    )
    
    find_library(GLFW3_LIBRARY NAMES glfw3 glfw
        PATHS
        ${CMAKE_SOURCE_DIR}/external/glfw/lib
        /usr/lib
        /usr/local/lib
        "C:/Program Files/GLFW/lib"
        "C:/msys64/mingw64/lib"
    )
    
    if(GLFW3_INCLUDE_DIR AND GLFW3_LIBRARY)
        set(GLFW3_FOUND TRUE)
        set(GLFW3_INCLUDE_DIRS ${GLFW3_INCLUDE_DIR})
        set(GLFW3_LIBRARIES ${GLFW3_LIBRARY})
    endif()
endif()

# Try to find GLEW
find_package(PkgConfig QUIET)
if(PkgConfig_FOUND)
    pkg_check_modules(GLEW QUIET glew)
endif()

if(NOT GLEW_FOUND)
    find_path(GLEW_INCLUDE_DIR NAMES GL/glew.h
        PATHS
        ${CMAKE_SOURCE_DIR}/external/glew/include
        /usr/include
        /usr/local/include
        "C:/Program Files/GLEW/include"
        "C:/msys64/mingw64/include"
    )
    
    find_library(GLEW_LIBRARY NAMES GLEW glew32 glew
        PATHS
        ${CMAKE_SOURCE_DIR}/external/glew/lib
        /usr/lib
        /usr/local/lib
        "C:/Program Files/GLEW/lib"
        "C:/msys64/mingw64/lib"
    )
    
    if(GLEW_INCLUDE_DIR AND GLEW_LIBRARY)
        set(GLEW_FOUND TRUE)
        set(GLEW_INCLUDE_DIRS ${GLEW_INCLUDE_DIR})
        set(GLEW_LIBRARIES ${GLEW_LIBRARY})
    endif()
endif()

# Try to find GLM
find_path(GLM_INCLUDE_DIR NAMES glm/glm.hpp
    PATHS
    ${CMAKE_SOURCE_DIR}/external/glm
    /usr/include
    /usr/local/include
    "C:/Program Files/GLM/include"
    "C:/msys64/mingw64/include"
)

if(GLM_INCLUDE_DIR)
    set(GLM_FOUND TRUE)
    set(GLM_INCLUDE_DIRS ${GLM_INCLUDE_DIR})
endif()

# Include directories
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_SOURCE_DIR}/src)

if(GLFW3_FOUND)
    include_directories(${GLFW3_INCLUDE_DIRS})
    message(STATUS "GLFW3 found: ${GLFW3_INCLUDE_DIRS}")
else()
    message(WARNING "GLFW3 not found - will use stub implementation")
endif()

if(GLEW_FOUND)
    include_directories(${GLEW_INCLUDE_DIRS})
    message(STATUS "GLEW found: ${GLEW_INCLUDE_DIRS}")
else()
    message(WARNING "GLEW not found - will use stub implementation")
endif()

if(GLM_FOUND)
    include_directories(${GLM_INCLUDE_DIRS})
    message(STATUS "GLM found: ${GLM_INCLUDE_DIRS}")
else()
    message(WARNING "GLM not found - will use stub implementation")
endif()

# Source files (simplified version that works)
set(SOURCES
    src/main_simple_3d.cpp
)

# Create executable
add_executable(${PROJECT_NAME} ${SOURCES})

# Link libraries
target_link_libraries(${PROJECT_NAME} OpenGL::GL)

if(GLFW3_FOUND)
    target_link_libraries(${PROJECT_NAME} ${GLFW3_LIBRARIES})
endif()

if(GLEW_FOUND)
    target_link_libraries(${PROJECT_NAME} ${GLEW_LIBRARIES})
endif()

# Platform-specific settings
if(WIN32)
    target_link_libraries(${PROJECT_NAME} opengl32)
    target_link_libraries(${PROJECT_NAME} kernel32 user32 gdi32 winspool shell32 ole32 oleaut32 uuid comdlg32 advapi32)
elseif(APPLE)
    target_link_libraries(${PROJECT_NAME} "-framework OpenGL" "-framework Cocoa" "-framework IOKit" "-framework CoreVideo")
else()
    target_link_libraries(${PROJECT_NAME} GL X11 Xrandr Xinerama Xcursor Xi)
endif()

# Copy shaders to build directory
file(COPY ${CMAKE_SOURCE_DIR}/shaders DESTINATION ${CMAKE_BINARY_DIR})

# Compiler flags
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(${PROJECT_NAME} PRIVATE -O3 -DNDEBUG)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -g -O0)
endif()

# Print configuration summary
message(STATUS "Configuration Summary:")
message(STATUS "  OpenGL: ${OpenGL_FOUND}")
message(STATUS "  GLFW3: ${GLFW3_FOUND}")
message(STATUS "  GLEW: ${GLEW_FOUND}")
message(STATUS "  GLM: ${GLM_FOUND}")
message(STATUS "  Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
